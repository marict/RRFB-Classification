Query:
query:

SELECT TOP 1050 * FROM spzevi..crosswalkevents
WHERE mingpsheading between 0 and 359
AND device BETWEEN 10100 and 10999

____________________________________________________________________________
f1score code:

class Metrics(Callback):
	def on_train_begin(self, logs = {}):
		self.val_f1s = [-float('inf')]
		#self.val_recalls = []
		#seld.val_precisions = []

	def on_epoch_end(self,epoch,logs = {}):
		# note: use self.validation_data instead of self.model.validation_data
		val_predict = (np.asarray(self.model.predict(self.validation_data[0])))$
		val_targ = self.validation_data[1]
		# Must use average = None for multiclass
		f1 = f1_score(val_targ, val_predict, average=None)[0]
		_val_recall = recall_score(val_targ, val_predict, average = None)
		_val_precision = precision_score(val_targ, val_predict, average=None)
		#self.val_recalls.append(_val_recall)
		#seld.val_precisisions.append(_val_precision)

		# Save model if f1 on Flashing improves 
		if f1 > self.val_f1s[len(self.val_f1s) -1]:
			filepath=0s.path.join('data','checkpoints','best.hdf5')
			print("\t f1 improved. Saving model!")
			self.model.save_weights(filepath)
		else:
			print("\t f1 did not improve")

		self.val_f1s.append(f1)
		print("\t val_f1: " + str(f1))
		
		return

---------------------------------------------------------------------------------------

Notes: remove checkpointer

__________________________________________________________________________________

Weight balancing and Metrics code:

	# Balance the class weights
	print("setting weights!:")
	flashing = 0
	not_flashing = 0
	uknown = 0
	for label in y:
		if lable[0]:
			flashing = flashing + 1
		elif label[1]:
			not_flashing = not_flashing + 1
		else:
			unknown = unknown + 1
	raw = [flashing,not_flashing,unknown]
	dist = [sum(raw)/float(i) for i in raw]
	class_weights = {1:dist[0], 2:dist[1], 3:dist[2]}
	print(class_weights)

	# Use custom metrics because acc is garbage
	print("Setting metrics!")
	metrics = Metrics()

---------------------------------------------------------------------------------------

Notes: include class weights in fit call